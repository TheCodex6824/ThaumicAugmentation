plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'eclipse'
    id 'idea'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        codeChickenLib
        mergetool
    }
}

// eclipse thinks test needs resources if this is not here
sourceSets {
    test {
        resources.setSrcDirs([])
    }
}

import net.minecraftforge.gradle.common.tasks.SignJar
import org.apache.tools.ant.filters.ReplaceTokens

repositories {
    maven {
        url = 'https://www.cursemaven.com/'
        content {
            includeGroup "curse.maven"
        }
    }
}

version = "${mcversion}-${version}"
group = 'thecodex6824.thaumicaugmentation' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ThaumicAugmentation'

//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

ext {
    if (!project.hasProperty('certFingerprint')) {
        certFingerprint = ''    
    }
}

final arch = System.getProperty("os.arch")
final needCustomNatives = arch != "x86" && arch != "i386" && arch != "x86_64" && arch != "amd64"
if (needCustomNatives) {
    configurations.all {
        exclude group: 'net.java.jinput', module: 'jinput'
        exclude group: 'net.java.jinput', module: 'jinput-platform'
        exclude group: 'org.lwjgl.lwjgl', module: 'lwjgl'
        exclude group: 'org.lwjgl.lwjgl', module: 'lwjgl-platform'
    }

    println 'Detected a non-x86 architecture. To run the client successfully, you will need to place lwjgl and jinput native libraries (with their associated jars) in the natives folder.'
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/thaumicaugmentation_at.cfg')
    
    runs {
        client {
            workingDirectory file('run')
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            property 'fml.coreMods.load', 'thecodex6824.thaumicaugmentation.core.ThaumicAugmentationCore'

            if (needCustomNatives) {
                property 'java.library.path', ''
                environment 'nativesDirectory', "${project.getProjectDir()}/natives"
            }

            environment 'MC_VERSION', '1.12.2'
            
            mods {
                thaumicaugmentation {
                    source sourceSets.main
                }
            }
        }
        
        server {
            workingDirectory file('run')
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            property 'fml.coreMods.load', 'thecodex6824.thaumicaugmentation.core.ThaumicAugmentationCore'

            if (needCustomNatives) {
                property 'java.library.path', ''
                environment 'nativesDirectory', "${project.getProjectDir()}/natives"
            }

            environment 'MC_VERSION', '1.12.2'
            
            mods {
                thaumicaugmentation {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcversion}-${forgeversion}"
    
    implementation fg.deobf('curse.maven:thaumcraft-223628:2629023')
    implementation fg.deobf('curse.maven:baubles-227083:2518667')
    
    compileOnly 'curse.maven:jeid-296289:2919737'
    compileOnly 'curse.maven:botania-225643:2846950'
    compileOnly 'curse.maven:auracontrol-397104:3013979'
    compileOnly 'curse.maven:electroblobs-wizardry-265642:2929294'
    
    testImplementation 'junit:junit:4.13'
    
    runtimeOnly 'curse.maven:jei-238222:2995897'
    runtimeOnly 'curse.maven:thaumic-jei-285492:2705304'
    runtimeOnly 'curse.maven:the-one-probe-245211:2667280'
    runtimeOnly 'curse.maven:ctm-267602:2915363'
    
    // if the curse maven is down or otherwise not working:
    // comment the above "implementation", "compileOnly", and "runtimeOnly" entries
    // uncomment the following and put jars into subfolders in the "lib" folder
    
    //implementation fileTree(dir: 'lib/implementation', include: '*.jar')
    //compileOnly fileTree(dir: 'lib/compileOnly', include: '*.jar')
    //runtimeOnly fileTree(dir: 'lib/runtimeOnly', include: '*.jar')
    
    // note that the first line has no deobf - if you need it use BON2 or something
    // to avoid needing test jars, comment the "testImplementation" lines and put "-x test" on the command line

    // For the native library binding jars (which need to be the exact same version as the natives)
    if (needCustomNatives) {
        implementation fileTree(dir: 'natives', include: '*.jar')
    }
}

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

task filterTokens(type: Sync) {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'apiversion', apiversion
    inputs.property 'certFingerprint', certFingerprint
    
    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [APIVERSION: apiversion.toString(), VERSION: version.toString(), FINGERPRINT: certFingerprint.toString()])
    into "$buildDir/src/$sourceSets.main.name/$sourceSets.main.java.name"
}

compileJava.source = filterTokens.outputs

processResources {
    // required to allow file expansion later
    duplicatesStrategy = 'include'
    
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'apiversion', apiversion
    inputs.property 'mcversion', mcversion
    
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version': version, 'mcversion': mcversion, 'forgeversion': forgeversion, 'forgeminversion': forgeminversion
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

javadoc {
    include 'thecodex6824/thaumicaugmentation/api/**'
}

task signJar(type: SignJar) {
    onlyIf { project.hasProperty('keyStore') }
    
    if (project.hasProperty('keyStore')) { // needed to skip gradle trying to find vars
        keyStore = project.keyStore
        alias = project.alias
        storePass = project.storePass
        keyPass = project.keyPass
        
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'thaumicaugmentation_at.cfg'
        attributes 'FMLCorePlugin': 'thecodex6824.thaumicaugmentation.core.ThaumicAugmentationCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    
    afterEvaluate { project.getTasks().getByName('reobfJar').finalizedBy(signJar) }
}

jar.finalizedBy('reobfJar')

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'api'
    include 'thecodex6824/thaumicaugmentation/api/**'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'sources'
}

artifacts {
    archives apiJar
    archives javadocJar
    archives sourcesJar
}

test {
    useJUnit()
    maxHeapSize = '1G'
}
